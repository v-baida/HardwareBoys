
Parktronic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000002c  20000000  0800309c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b0  2000002c  080030c8  0002002c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000dc  080030c8  000200dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000098da  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001740  00000000  00000000  00029936  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a08  00000000  00000000  0002b078  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000930  00000000  00000000  0002ba80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000046ab  00000000  00000000  0002c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003294  00000000  00000000  00030a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033cef  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028d4  00000000  00000000  00033d6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003064 	.word	0x08003064

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000030 	.word	0x20000030
 8000200:	08003064 	.word	0x08003064

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	4a3b      	ldr	r2, [pc, #236]	; (800061c <MX_GPIO_Init+0x108>)
 8000530:	4b3a      	ldr	r3, [pc, #232]	; (800061c <MX_GPIO_Init+0x108>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b38      	ldr	r3, [pc, #224]	; (800061c <MX_GPIO_Init+0x108>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	4a34      	ldr	r2, [pc, #208]	; (800061c <MX_GPIO_Init+0x108>)
 800054c:	4b33      	ldr	r3, [pc, #204]	; (800061c <MX_GPIO_Init+0x108>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b31      	ldr	r3, [pc, #196]	; (800061c <MX_GPIO_Init+0x108>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	4a2d      	ldr	r2, [pc, #180]	; (800061c <MX_GPIO_Init+0x108>)
 8000568:	4b2c      	ldr	r3, [pc, #176]	; (800061c <MX_GPIO_Init+0x108>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <MX_GPIO_Init+0x108>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4a26      	ldr	r2, [pc, #152]	; (800061c <MX_GPIO_Init+0x108>)
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <MX_GPIO_Init+0x108>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <MX_GPIO_Init+0x108>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, buz1_Pin|buz2_Pin|buz3_Pin|buz4_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	210f      	movs	r1, #15
 800059e:	4820      	ldr	r0, [pc, #128]	; (8000620 <MX_GPIO_Init+0x10c>)
 80005a0:	f001 f8a4 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led4_Pin|led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <MX_GPIO_Init+0x110>)
 80005ac:	f001 f89e 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, trig4_Pin|trig1_Pin|trig3_Pin|trig2_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80005b6:	481c      	ldr	r0, [pc, #112]	; (8000628 <MX_GPIO_Init+0x114>)
 80005b8:	f001 f898 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = buz1_Pin|buz2_Pin|buz3_Pin|buz4_Pin;
 80005bc:	230f      	movs	r3, #15
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	4813      	ldr	r0, [pc, #76]	; (8000620 <MX_GPIO_Init+0x10c>)
 80005d4:	f000 fef8 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = led4_Pin|led1_Pin|led2_Pin|led3_Pin;
 80005d8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <MX_GPIO_Init+0x110>)
 80005f2:	f000 fee9 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = trig4_Pin|trig1_Pin|trig3_Pin|trig2_Pin;
 80005f6:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <MX_GPIO_Init+0x114>)
 8000610:	f000 feda 	bl	80013c8 <HAL_GPIO_Init>

}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40020800 	.word	0x40020800
 8000624:	40020000 	.word	0x40020000
 8000628:	40020400 	.word	0x40020400

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t Distance[4] = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fd1f 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f875 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f7ff ff65 	bl	8000514 <MX_GPIO_Init>
  MX_TIM1_Init();
 800064a:	f000 fbc5 	bl	8000dd8 <MX_TIM1_Init>
  MX_TIM4_Init();
 800064e:	f000 fc13 	bl	8000e78 <MX_TIM4_Init>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Measure_Distance(Distance);
 8000652:	463b      	mov	r3, r7
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f8d7 	bl	8000808 <Measure_Distance>

		if (PLACE_FREE > Distance[0] )
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b09      	cmp	r3, #9
 800065e:	d80b      	bhi.n	8000678 <main+0x4c>
		{
			HAL_GPIO_WritePin(GPIOA, led1_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000666:	4830      	ldr	r0, [pc, #192]	; (8000728 <main+0xfc>)
 8000668:	f001 f840 	bl	80016ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, buz1_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	482e      	ldr	r0, [pc, #184]	; (800072c <main+0x100>)
 8000672:	f001 f83b 	bl	80016ec <HAL_GPIO_WritePin>
 8000676:	e00a      	b.n	800068e <main+0x62>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, led1_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	482a      	ldr	r0, [pc, #168]	; (8000728 <main+0xfc>)
 8000680:	f001 f834 	bl	80016ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, buz1_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2101      	movs	r1, #1
 8000688:	4828      	ldr	r0, [pc, #160]	; (800072c <main+0x100>)
 800068a:	f001 f82f 	bl	80016ec <HAL_GPIO_WritePin>
		}

		if (PLACE_FREE > Distance[1] )
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b09      	cmp	r3, #9
 8000692:	d80b      	bhi.n	80006ac <main+0x80>
		{
			HAL_GPIO_WritePin(GPIOA, led2_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069a:	4823      	ldr	r0, [pc, #140]	; (8000728 <main+0xfc>)
 800069c:	f001 f826 	bl	80016ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, buz2_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2102      	movs	r1, #2
 80006a4:	4821      	ldr	r0, [pc, #132]	; (800072c <main+0x100>)
 80006a6:	f001 f821 	bl	80016ec <HAL_GPIO_WritePin>
 80006aa:	e00a      	b.n	80006c2 <main+0x96>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, led2_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b2:	481d      	ldr	r0, [pc, #116]	; (8000728 <main+0xfc>)
 80006b4:	f001 f81a 	bl	80016ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, buz2_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2102      	movs	r1, #2
 80006bc:	481b      	ldr	r0, [pc, #108]	; (800072c <main+0x100>)
 80006be:	f001 f815 	bl	80016ec <HAL_GPIO_WritePin>
		}

		if (PLACE_FREE > Distance[2] )
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	d80b      	bhi.n	80006e0 <main+0xb4>
		{
			HAL_GPIO_WritePin(GPIOA, led3_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ce:	4816      	ldr	r0, [pc, #88]	; (8000728 <main+0xfc>)
 80006d0:	f001 f80c 	bl	80016ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, buz3_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2104      	movs	r1, #4
 80006d8:	4814      	ldr	r0, [pc, #80]	; (800072c <main+0x100>)
 80006da:	f001 f807 	bl	80016ec <HAL_GPIO_WritePin>
 80006de:	e00a      	b.n	80006f6 <main+0xca>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, led3_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e6:	4810      	ldr	r0, [pc, #64]	; (8000728 <main+0xfc>)
 80006e8:	f001 f800 	bl	80016ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, buz3_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2104      	movs	r1, #4
 80006f0:	480e      	ldr	r0, [pc, #56]	; (800072c <main+0x100>)
 80006f2:	f000 fffb 	bl	80016ec <HAL_GPIO_WritePin>
		}

		if (PLACE_FREE > Distance[3] )
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b09      	cmp	r3, #9
 80006fa:	d80a      	bhi.n	8000712 <main+0xe6>
		{
			HAL_GPIO_WritePin(GPIOA, led4_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <main+0xfc>)
 8000702:	f000 fff3 	bl	80016ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, buz4_Pin, GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2108      	movs	r1, #8
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <main+0x100>)
 800070c:	f000 ffee 	bl	80016ec <HAL_GPIO_WritePin>
 8000710:	e79f      	b.n	8000652 <main+0x26>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, led4_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <main+0xfc>)
 8000718:	f000 ffe8 	bl	80016ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, buz4_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2108      	movs	r1, #8
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <main+0x100>)
 8000722:	f000 ffe3 	bl	80016ec <HAL_GPIO_WritePin>
		Measure_Distance(Distance);
 8000726:	e794      	b.n	8000652 <main+0x26>
 8000728:	40020000 	.word	0x40020000
 800072c:	40020800 	.word	0x40020800

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fc88 	bl	8003054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4a29      	ldr	r2, [pc, #164]	; (8000800 <SystemClock_Config+0xd0>)
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <SystemClock_Config+0xd0>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <SystemClock_Config+0xd0>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4a23      	ldr	r2, [pc, #140]	; (8000804 <SystemClock_Config+0xd4>)
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <SystemClock_Config+0xd4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007a8:	2348      	movs	r3, #72	; 0x48
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 fa4b 	bl	8001c58 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007c8:	f000 fa68 	bl	8000c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2102      	movs	r1, #2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 ff99 	bl	8001720 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007f4:	f000 fa52 	bl	8000c9c <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	; 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <Measure_Distance>:

/* USER CODE BEGIN 4 */
void Measure_Distance(uint32_t Distance_cm[])
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	/*--------------------------1------------------------*/
	HAL_GPIO_WritePin(GPIOB, trig1_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2108      	movs	r1, #8
 8000814:	4863      	ldr	r0, [pc, #396]	; (80009a4 <Measure_Distance+0x19c>)
 8000816:	f000 ff69 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1); // 10us
 800081a:	4863      	ldr	r0, [pc, #396]	; (80009a8 <Measure_Distance+0x1a0>)
 800081c:	f001 fca1 	bl	8002162 <HAL_TIM_Base_Start_IT>

	while (!TimeEllapsed_Flag)
 8000820:	bf00      	nop
 8000822:	4b62      	ldr	r3, [pc, #392]	; (80009ac <Measure_Distance+0x1a4>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0fb      	beq.n	8000822 <Measure_Distance+0x1a>
	{
	}

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800082a:	4b61      	ldr	r3, [pc, #388]	; (80009b0 <Measure_Distance+0x1a8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000832:	2100      	movs	r1, #0
 8000834:	485e      	ldr	r0, [pc, #376]	; (80009b0 <Measure_Distance+0x1a8>)
 8000836:	f001 fd0f 	bl	8002258 <HAL_TIM_IC_Start_IT>

	TimeEllapsed_Flag = 0;
 800083a:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <Measure_Distance+0x1a4>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, trig1_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2108      	movs	r1, #8
 8000844:	4857      	ldr	r0, [pc, #348]	; (80009a4 <Measure_Distance+0x19c>)
 8000846:	f000 ff51 	bl	80016ec <HAL_GPIO_WritePin>

	while (!CaptureIsOver_Flag)
 800084a:	bf00      	nop
 800084c:	4b59      	ldr	r3, [pc, #356]	; (80009b4 <Measure_Distance+0x1ac>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0fb      	beq.n	800084c <Measure_Distance+0x44>
	{
	}

	CaptureIsOver_Flag = 0;
 8000854:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <Measure_Distance+0x1ac>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]

	Distance_cm[0] = Difference / 58;
 800085a:	4b57      	ldr	r3, [pc, #348]	; (80009b8 <Measure_Distance+0x1b0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a57      	ldr	r2, [pc, #348]	; (80009bc <Measure_Distance+0x1b4>)
 8000860:	fba2 2303 	umull	r2, r3, r2, r3
 8000864:	095a      	lsrs	r2, r3, #5
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
	HAL_Delay(80);
 800086a:	2050      	movs	r0, #80	; 0x50
 800086c:	f000 fc7a 	bl	8001164 <HAL_Delay>

	/*--------------------------2------------------------*/

	HAL_GPIO_WritePin(GPIOB, trig2_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2120      	movs	r1, #32
 8000874:	484b      	ldr	r0, [pc, #300]	; (80009a4 <Measure_Distance+0x19c>)
 8000876:	f000 ff39 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1); // 10us
 800087a:	484b      	ldr	r0, [pc, #300]	; (80009a8 <Measure_Distance+0x1a0>)
 800087c:	f001 fc71 	bl	8002162 <HAL_TIM_Base_Start_IT>

	while (!TimeEllapsed_Flag)
 8000880:	bf00      	nop
 8000882:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <Measure_Distance+0x1a4>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0fb      	beq.n	8000882 <Measure_Distance+0x7a>
	{
	}

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800088a:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <Measure_Distance+0x1a8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000892:	2104      	movs	r1, #4
 8000894:	4846      	ldr	r0, [pc, #280]	; (80009b0 <Measure_Distance+0x1a8>)
 8000896:	f001 fcdf 	bl	8002258 <HAL_TIM_IC_Start_IT>

	TimeEllapsed_Flag = 0;
 800089a:	4b44      	ldr	r3, [pc, #272]	; (80009ac <Measure_Distance+0x1a4>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, trig2_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	483f      	ldr	r0, [pc, #252]	; (80009a4 <Measure_Distance+0x19c>)
 80008a6:	f000 ff21 	bl	80016ec <HAL_GPIO_WritePin>

	while (!CaptureIsOver_Flag)
 80008aa:	bf00      	nop
 80008ac:	4b41      	ldr	r3, [pc, #260]	; (80009b4 <Measure_Distance+0x1ac>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0fb      	beq.n	80008ac <Measure_Distance+0xa4>
	{
	}

	CaptureIsOver_Flag = 0;
 80008b4:	4b3f      	ldr	r3, [pc, #252]	; (80009b4 <Measure_Distance+0x1ac>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]

	Distance_cm[1] = Difference / 58;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3304      	adds	r3, #4
 80008be:	4a3e      	ldr	r2, [pc, #248]	; (80009b8 <Measure_Distance+0x1b0>)
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	493e      	ldr	r1, [pc, #248]	; (80009bc <Measure_Distance+0x1b4>)
 80008c4:	fba1 1202 	umull	r1, r2, r1, r2
 80008c8:	0952      	lsrs	r2, r2, #5
 80008ca:	601a      	str	r2, [r3, #0]
	HAL_Delay(80);
 80008cc:	2050      	movs	r0, #80	; 0x50
 80008ce:	f000 fc49 	bl	8001164 <HAL_Delay>

	/*--------------------------3------------------------*/

	HAL_GPIO_WritePin(GPIOB, trig3_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2110      	movs	r1, #16
 80008d6:	4833      	ldr	r0, [pc, #204]	; (80009a4 <Measure_Distance+0x19c>)
 80008d8:	f000 ff08 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1); // 10us
 80008dc:	4832      	ldr	r0, [pc, #200]	; (80009a8 <Measure_Distance+0x1a0>)
 80008de:	f001 fc40 	bl	8002162 <HAL_TIM_Base_Start_IT>

	while (!TimeEllapsed_Flag)
 80008e2:	bf00      	nop
 80008e4:	4b31      	ldr	r3, [pc, #196]	; (80009ac <Measure_Distance+0x1a4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0fb      	beq.n	80008e4 <Measure_Distance+0xdc>
	{
	}

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <Measure_Distance+0x1a8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 80008f4:	2108      	movs	r1, #8
 80008f6:	482e      	ldr	r0, [pc, #184]	; (80009b0 <Measure_Distance+0x1a8>)
 80008f8:	f001 fcae 	bl	8002258 <HAL_TIM_IC_Start_IT>

	TimeEllapsed_Flag = 0;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <Measure_Distance+0x1a4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, trig3_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2110      	movs	r1, #16
 8000906:	4827      	ldr	r0, [pc, #156]	; (80009a4 <Measure_Distance+0x19c>)
 8000908:	f000 fef0 	bl	80016ec <HAL_GPIO_WritePin>

	while (!CaptureIsOver_Flag)
 800090c:	bf00      	nop
 800090e:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <Measure_Distance+0x1ac>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0fb      	beq.n	800090e <Measure_Distance+0x106>
	{
	}

	CaptureIsOver_Flag = 0;
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <Measure_Distance+0x1ac>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]

	Distance_cm[2] = Difference / 58;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3308      	adds	r3, #8
 8000920:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <Measure_Distance+0x1b0>)
 8000922:	6812      	ldr	r2, [r2, #0]
 8000924:	4925      	ldr	r1, [pc, #148]	; (80009bc <Measure_Distance+0x1b4>)
 8000926:	fba1 1202 	umull	r1, r2, r1, r2
 800092a:	0952      	lsrs	r2, r2, #5
 800092c:	601a      	str	r2, [r3, #0]
	HAL_Delay(80);
 800092e:	2050      	movs	r0, #80	; 0x50
 8000930:	f000 fc18 	bl	8001164 <HAL_Delay>

	/*--------------------------4------------------------*/

	HAL_GPIO_WritePin(GPIOB, trig4_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093a:	481a      	ldr	r0, [pc, #104]	; (80009a4 <Measure_Distance+0x19c>)
 800093c:	f000 fed6 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim1); // 10us
 8000940:	4819      	ldr	r0, [pc, #100]	; (80009a8 <Measure_Distance+0x1a0>)
 8000942:	f001 fc0e 	bl	8002162 <HAL_TIM_Base_Start_IT>

	while (!TimeEllapsed_Flag)
 8000946:	bf00      	nop
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <Measure_Distance+0x1a4>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0fb      	beq.n	8000948 <Measure_Distance+0x140>
	{
	}

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <Measure_Distance+0x1a8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000958:	210c      	movs	r1, #12
 800095a:	4815      	ldr	r0, [pc, #84]	; (80009b0 <Measure_Distance+0x1a8>)
 800095c:	f001 fc7c 	bl	8002258 <HAL_TIM_IC_Start_IT>

	TimeEllapsed_Flag = 0;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <Measure_Distance+0x1a4>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, trig4_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <Measure_Distance+0x19c>)
 800096e:	f000 febd 	bl	80016ec <HAL_GPIO_WritePin>

	while (!CaptureIsOver_Flag)
 8000972:	bf00      	nop
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <Measure_Distance+0x1ac>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0fb      	beq.n	8000974 <Measure_Distance+0x16c>
	{
	}

	CaptureIsOver_Flag = 0;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <Measure_Distance+0x1ac>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]

	Distance_cm[3] = Difference / 58;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	330c      	adds	r3, #12
 8000986:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <Measure_Distance+0x1b0>)
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	490c      	ldr	r1, [pc, #48]	; (80009bc <Measure_Distance+0x1b4>)
 800098c:	fba1 1202 	umull	r1, r2, r1, r2
 8000990:	0952      	lsrs	r2, r2, #5
 8000992:	601a      	str	r2, [r3, #0]
	HAL_Delay(80);
 8000994:	2050      	movs	r0, #80	; 0x50
 8000996:	f000 fbe5 	bl	8001164 <HAL_Delay>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40020400 	.word	0x40020400
 80009a8:	20000098 	.word	0x20000098
 80009ac:	20000049 	.word	0x20000049
 80009b0:	20000058 	.word	0x20000058
 80009b4:	2000004a 	.word	0x2000004a
 80009b8:	2000004c 	.word	0x2000004c
 80009bc:	8d3dcb09 	.word	0x8d3dcb09

080009c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	if (htim->Instance == TIM1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d109      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		HAL_TIM_Base_Stop_IT(htim);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f001 fbe9 	bl	80021aa <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(htim, 0);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
		TimeEllapsed_Flag = 1;
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
	}
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010000 	.word	0x40010000
 80009f4:	20000049 	.word	0x20000049

080009f8 <write_handler>:
void write_handler (uint64_t tim_channel)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	e9c7 0100 	strd	r0, r1, [r7]
	if (TriggerEdge == 0)
 8000a02:	4b82      	ldr	r3, [pc, #520]	; (8000c0c <write_handler+0x214>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d174      	bne.n	8000af4 <write_handler+0xfc>
	{
		IC_Val1 = 0;
 8000a0a:	4b81      	ldr	r3, [pc, #516]	; (8000c10 <write_handler+0x218>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
		IC_Val1 = HAL_TIM_ReadCapturedValue(&htim4, tim_channel);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	4619      	mov	r1, r3
 8000a14:	487f      	ldr	r0, [pc, #508]	; (8000c14 <write_handler+0x21c>)
 8000a16:	f001 ff53 	bl	80028c0 <HAL_TIM_ReadCapturedValue>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	4b7c      	ldr	r3, [pc, #496]	; (8000c10 <write_handler+0x218>)
 8000a1e:	601a      	str	r2, [r3, #0]
		TriggerEdge = 1;
 8000a20:	4b7a      	ldr	r3, [pc, #488]	; (8000c0c <write_handler+0x214>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]

		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, tim_channel,
 8000a26:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000a2a:	4323      	orrs	r3, r4
 8000a2c:	d108      	bne.n	8000a40 <write_handler+0x48>
 8000a2e:	4b79      	ldr	r3, [pc, #484]	; (8000c14 <write_handler+0x21c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a78      	ldr	r2, [pc, #480]	; (8000c14 <write_handler+0x21c>)
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	6a12      	ldr	r2, [r2, #32]
 8000a38:	f022 020a 	bic.w	r2, r2, #10
 8000a3c:	621a      	str	r2, [r3, #32]
 8000a3e:	e025      	b.n	8000a8c <write_handler+0x94>
 8000a40:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	bf08      	it	eq
 8000a48:	2b04      	cmpeq	r3, #4
 8000a4a:	d108      	bne.n	8000a5e <write_handler+0x66>
 8000a4c:	4b71      	ldr	r3, [pc, #452]	; (8000c14 <write_handler+0x21c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a70      	ldr	r2, [pc, #448]	; (8000c14 <write_handler+0x21c>)
 8000a52:	6812      	ldr	r2, [r2, #0]
 8000a54:	6a12      	ldr	r2, [r2, #32]
 8000a56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000a5a:	621a      	str	r2, [r3, #32]
 8000a5c:	e016      	b.n	8000a8c <write_handler+0x94>
 8000a5e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000a62:	2c00      	cmp	r4, #0
 8000a64:	bf08      	it	eq
 8000a66:	2b08      	cmpeq	r3, #8
 8000a68:	d108      	bne.n	8000a7c <write_handler+0x84>
 8000a6a:	4b6a      	ldr	r3, [pc, #424]	; (8000c14 <write_handler+0x21c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a69      	ldr	r2, [pc, #420]	; (8000c14 <write_handler+0x21c>)
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	6a12      	ldr	r2, [r2, #32]
 8000a74:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000a78:	621a      	str	r2, [r3, #32]
 8000a7a:	e007      	b.n	8000a8c <write_handler+0x94>
 8000a7c:	4b65      	ldr	r3, [pc, #404]	; (8000c14 <write_handler+0x21c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a64      	ldr	r2, [pc, #400]	; (8000c14 <write_handler+0x21c>)
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	6a12      	ldr	r2, [r2, #32]
 8000a86:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8000a8a:	621a      	str	r2, [r3, #32]
 8000a8c:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000a90:	4323      	orrs	r3, r4
 8000a92:	d108      	bne.n	8000aa6 <write_handler+0xae>
 8000a94:	4b5f      	ldr	r3, [pc, #380]	; (8000c14 <write_handler+0x21c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a5e      	ldr	r2, [pc, #376]	; (8000c14 <write_handler+0x21c>)
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	6a12      	ldr	r2, [r2, #32]
 8000a9e:	f042 0202 	orr.w	r2, r2, #2
 8000aa2:	621a      	str	r2, [r3, #32]

		HAL_TIM_IC_Stop_IT(&htim4, tim_channel);

		CaptureIsOver_Flag = 1;
	}
}
 8000aa4:	e0ae      	b.n	8000c04 <write_handler+0x20c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, tim_channel,
 8000aa6:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000aaa:	2c00      	cmp	r4, #0
 8000aac:	bf08      	it	eq
 8000aae:	2b04      	cmpeq	r3, #4
 8000ab0:	d108      	bne.n	8000ac4 <write_handler+0xcc>
 8000ab2:	4b58      	ldr	r3, [pc, #352]	; (8000c14 <write_handler+0x21c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a57      	ldr	r2, [pc, #348]	; (8000c14 <write_handler+0x21c>)
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	6a12      	ldr	r2, [r2, #32]
 8000abc:	f042 0220 	orr.w	r2, r2, #32
 8000ac0:	621a      	str	r2, [r3, #32]
}
 8000ac2:	e09f      	b.n	8000c04 <write_handler+0x20c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, tim_channel,
 8000ac4:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000ac8:	2c00      	cmp	r4, #0
 8000aca:	bf08      	it	eq
 8000acc:	2b08      	cmpeq	r3, #8
 8000ace:	d108      	bne.n	8000ae2 <write_handler+0xea>
 8000ad0:	4b50      	ldr	r3, [pc, #320]	; (8000c14 <write_handler+0x21c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a4f      	ldr	r2, [pc, #316]	; (8000c14 <write_handler+0x21c>)
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	6a12      	ldr	r2, [r2, #32]
 8000ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ade:	621a      	str	r2, [r3, #32]
}
 8000ae0:	e090      	b.n	8000c04 <write_handler+0x20c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, tim_channel,
 8000ae2:	4b4c      	ldr	r3, [pc, #304]	; (8000c14 <write_handler+0x21c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a4b      	ldr	r2, [pc, #300]	; (8000c14 <write_handler+0x21c>)
 8000ae8:	6812      	ldr	r2, [r2, #0]
 8000aea:	6a12      	ldr	r2, [r2, #32]
 8000aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000af0:	621a      	str	r2, [r3, #32]
}
 8000af2:	e087      	b.n	8000c04 <write_handler+0x20c>
		IC_Val2 = 0;
 8000af4:	4b48      	ldr	r3, [pc, #288]	; (8000c18 <write_handler+0x220>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
		IC_Val2 = HAL_TIM_ReadCapturedValue(&htim4, tim_channel);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	4845      	ldr	r0, [pc, #276]	; (8000c14 <write_handler+0x21c>)
 8000b00:	f001 fede 	bl	80028c0 <HAL_TIM_ReadCapturedValue>
 8000b04:	4602      	mov	r2, r0
 8000b06:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <write_handler+0x220>)
 8000b08:	601a      	str	r2, [r3, #0]
		TriggerEdge = 0;
 8000b0a:	4b40      	ldr	r3, [pc, #256]	; (8000c0c <write_handler+0x214>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		if (IC_Val2 > IC_Val1)
 8000b10:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <write_handler+0x220>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b3e      	ldr	r3, [pc, #248]	; (8000c10 <write_handler+0x218>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d907      	bls.n	8000b2c <write_handler+0x134>
			Difference = IC_Val2 - IC_Val1;
 8000b1c:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <write_handler+0x220>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <write_handler+0x218>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	4a3d      	ldr	r2, [pc, #244]	; (8000c1c <write_handler+0x224>)
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	e001      	b.n	8000b30 <write_handler+0x138>
			Error_Handler();
 8000b2c:	f000 f8b6 	bl	8000c9c <Error_Handler>
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000b30:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <write_handler+0x21c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, tim_channel,
 8000b38:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000b3c:	4323      	orrs	r3, r4
 8000b3e:	d108      	bne.n	8000b52 <write_handler+0x15a>
 8000b40:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <write_handler+0x21c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a33      	ldr	r2, [pc, #204]	; (8000c14 <write_handler+0x21c>)
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	6a12      	ldr	r2, [r2, #32]
 8000b4a:	f022 020a 	bic.w	r2, r2, #10
 8000b4e:	621a      	str	r2, [r3, #32]
 8000b50:	e025      	b.n	8000b9e <write_handler+0x1a6>
 8000b52:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	bf08      	it	eq
 8000b5a:	2b04      	cmpeq	r3, #4
 8000b5c:	d108      	bne.n	8000b70 <write_handler+0x178>
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <write_handler+0x21c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a2c      	ldr	r2, [pc, #176]	; (8000c14 <write_handler+0x21c>)
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	6a12      	ldr	r2, [r2, #32]
 8000b68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000b6c:	621a      	str	r2, [r3, #32]
 8000b6e:	e016      	b.n	8000b9e <write_handler+0x1a6>
 8000b70:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	bf08      	it	eq
 8000b78:	2b08      	cmpeq	r3, #8
 8000b7a:	d108      	bne.n	8000b8e <write_handler+0x196>
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <write_handler+0x21c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a24      	ldr	r2, [pc, #144]	; (8000c14 <write_handler+0x21c>)
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	6a12      	ldr	r2, [r2, #32]
 8000b86:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000b8a:	621a      	str	r2, [r3, #32]
 8000b8c:	e007      	b.n	8000b9e <write_handler+0x1a6>
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <write_handler+0x21c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <write_handler+0x21c>)
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	6a12      	ldr	r2, [r2, #32]
 8000b98:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8000b9c:	621a      	str	r2, [r3, #32]
 8000b9e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000ba2:	4323      	orrs	r3, r4
 8000ba4:	d106      	bne.n	8000bb4 <write_handler+0x1bc>
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <write_handler+0x21c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a1a      	ldr	r2, [pc, #104]	; (8000c14 <write_handler+0x21c>)
 8000bac:	6812      	ldr	r2, [r2, #0]
 8000bae:	6a12      	ldr	r2, [r2, #32]
 8000bb0:	621a      	str	r2, [r3, #32]
 8000bb2:	e01f      	b.n	8000bf4 <write_handler+0x1fc>
 8000bb4:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2b04      	cmpeq	r3, #4
 8000bbe:	d106      	bne.n	8000bce <write_handler+0x1d6>
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <write_handler+0x21c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <write_handler+0x21c>)
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	6a12      	ldr	r2, [r2, #32]
 8000bca:	621a      	str	r2, [r3, #32]
 8000bcc:	e012      	b.n	8000bf4 <write_handler+0x1fc>
 8000bce:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	bf08      	it	eq
 8000bd6:	2b08      	cmpeq	r3, #8
 8000bd8:	d106      	bne.n	8000be8 <write_handler+0x1f0>
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <write_handler+0x21c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <write_handler+0x21c>)
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	6a12      	ldr	r2, [r2, #32]
 8000be4:	621a      	str	r2, [r3, #32]
 8000be6:	e005      	b.n	8000bf4 <write_handler+0x1fc>
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <write_handler+0x21c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <write_handler+0x21c>)
 8000bee:	6812      	ldr	r2, [r2, #0]
 8000bf0:	6a12      	ldr	r2, [r2, #32]
 8000bf2:	621a      	str	r2, [r3, #32]
		HAL_TIM_IC_Stop_IT(&htim4, tim_channel);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <write_handler+0x21c>)
 8000bfa:	f001 fb95 	bl	8002328 <HAL_TIM_IC_Stop_IT>
		CaptureIsOver_Flag = 1;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <write_handler+0x228>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	20000048 	.word	0x20000048
 8000c10:	20000050 	.word	0x20000050
 8000c14:	20000058 	.word	0x20000058
 8000c18:	20000054 	.word	0x20000054
 8000c1c:	2000004c 	.word	0x2000004c
 8000c20:	2000004a 	.word	0x2000004a

08000c24 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	//	UNUSED(htim);

	if (htim->Instance == TIM4)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12a      	bne.n	8000c8c <HAL_TIM_IC_CaptureCallback+0x68>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7f1b      	ldrb	r3, [r3, #28]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d105      	bne.n	8000c4a <HAL_TIM_IC_CaptureCallback+0x26>
		{
			write_handler(tim_channal[0]);
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000c40:	cb18      	ldmia	r3, {r3, r4}
 8000c42:	4618      	mov	r0, r3
 8000c44:	4621      	mov	r1, r4
 8000c46:	f7ff fed7 	bl	80009f8 <write_handler>
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7f1b      	ldrb	r3, [r3, #28]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d106      	bne.n	8000c60 <HAL_TIM_IC_CaptureCallback+0x3c>
		{
			write_handler(tim_channal[1]);
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000c54:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	4621      	mov	r1, r4
 8000c5c:	f7ff fecc 	bl	80009f8 <write_handler>
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7f1b      	ldrb	r3, [r3, #28]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d106      	bne.n	8000c76 <HAL_TIM_IC_CaptureCallback+0x52>
		{
			write_handler(tim_channal[2]);
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000c6a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	4621      	mov	r1, r4
 8000c72:	f7ff fec1 	bl	80009f8 <write_handler>
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7f1b      	ldrb	r3, [r3, #28]
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d106      	bne.n	8000c8c <HAL_TIM_IC_CaptureCallback+0x68>
		{
			write_handler(tim_channal[3]);
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000c80:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8000c84:	4618      	mov	r0, r3
 8000c86:	4621      	mov	r1, r4
 8000c88:	f7ff feb6 	bl	80009f8 <write_handler>
		}
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}
 8000c94:	40000800 	.word	0x40000800
 8000c98:	20000000 	.word	0x20000000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <Error_Handler+0x6>

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f9f0 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000d4e:	f001 fb5b 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000098 	.word	0x20000098

08000d5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d62:	f001 fb51 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000098 	.word	0x20000098

08000d70 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000d76:	f001 fb47 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000098 	.word	0x20000098

08000d84 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM1_CC_IRQHandler+0x10>)
 8000d8a:	f001 fb3d 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000098 	.word	0x20000098

08000d98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <TIM4_IRQHandler+0x10>)
 8000d9e:	f001 fb33 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000058 	.word	0x20000058

08000dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <SystemInit+0x28>)
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <SystemInit+0x28>)
 8000db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SystemInit+0x28>)
 8000dc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <MX_TIM1_Init+0x9c>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e08:	2263      	movs	r2, #99	; 0x63
 8000e0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e1e:	4814      	ldr	r0, [pc, #80]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e20:	f001 f974 	bl	800210c <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000e2a:	f7ff ff37 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e3c:	f001 fc88 	bl	8002750 <HAL_TIM_ConfigClockSource>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000e46:	f7ff ff29 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e58:	f002 f81e 	bl	8002e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000e62:	f7ff ff1b 	bl	8000c9c <Error_Handler>
  }

}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000098 	.word	0x20000098
 8000e74:	40010000 	.word	0x40010000

08000e78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 8000e94:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000e96:	4a31      	ldr	r2, [pc, #196]	; (8000f5c <MX_TIM4_Init+0xe4>)
 8000e98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000e9c:	2247      	movs	r2, #71	; 0x47
 8000e9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000eba:	4827      	ldr	r0, [pc, #156]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000ebc:	f001 f9a0 	bl	8002200 <HAL_TIM_IC_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ec6:	f7ff fee9 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481f      	ldr	r0, [pc, #124]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000eda:	f001 ffdd 	bl	8002e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ee4:	f7ff feda 	bl	8000c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eec:	2301      	movs	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	4619      	mov	r1, r3
 8000efe:	4816      	ldr	r0, [pc, #88]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000f00:	f001 fb8a 	bl	8002618 <HAL_TIM_IC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000f0a:	f7ff fec7 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2204      	movs	r2, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4810      	ldr	r0, [pc, #64]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000f16:	f001 fb7f 	bl	8002618 <HAL_TIM_IC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000f20:	f7ff febc 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	2208      	movs	r2, #8
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480b      	ldr	r0, [pc, #44]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000f2c:	f001 fb74 	bl	8002618 <HAL_TIM_IC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8000f36:	f7ff feb1 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_TIM4_Init+0xe0>)
 8000f42:	f001 fb69 	bl	8002618 <HAL_TIM_IC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f4c:	f7ff fea6 	bl	8000c9c <Error_Handler>
  }

}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000058 	.word	0x20000058
 8000f5c:	40000800 	.word	0x40000800

08000f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12d      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2018      	movs	r0, #24
 8000f94:	f000 f9e1 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f98:	2018      	movs	r0, #24
 8000f9a:	f000 f9fa 	bl	8001392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2019      	movs	r0, #25
 8000fa4:	f000 f9d9 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fa8:	2019      	movs	r0, #25
 8000faa:	f000 f9f2 	bl	8001392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	201a      	movs	r0, #26
 8000fb4:	f000 f9d1 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000fb8:	201a      	movs	r0, #26
 8000fba:	f000 f9ea 	bl	8001392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	201b      	movs	r0, #27
 8000fc4:	f000 f9c9 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fc8:	201b      	movs	r0, #27
 8000fca:	f000 f9e2 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <HAL_TIM_IC_MspInit+0x94>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d134      	bne.n	800106c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <HAL_TIM_IC_MspInit+0x98>)
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_TIM_IC_MspInit+0x98>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_TIM_IC_MspInit+0x98>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <HAL_TIM_IC_MspInit+0x98>)
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_TIM_IC_MspInit+0x98>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_TIM_IC_MspInit+0x98>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = echo1_Pin|echo2_Pin|echo3_Pin|echo4_Pin;
 800103a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800104c:	2302      	movs	r3, #2
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4809      	ldr	r0, [pc, #36]	; (800107c <HAL_TIM_IC_MspInit+0x9c>)
 8001058:	f000 f9b6 	bl	80013c8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	201e      	movs	r0, #30
 8001062:	f000 f97a 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001066:	201e      	movs	r0, #30
 8001068:	f000 f993 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40000800 	.word	0x40000800
 8001078:	40023800 	.word	0x40023800
 800107c:	40020400 	.word	0x40020400

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <HAL_Init+0x40>)
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_Init+0x40>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <HAL_Init+0x40>)
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_Init+0x40>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_Init+0x40>)
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_Init+0x40>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f94b 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f808 	bl	80010c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b4:	f7ff fdf6 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023c00 	.word	0x40023c00

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x54>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x58>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f963 	bl	80013ae <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f92b 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4a06      	ldr	r2, [pc, #24]	; (8001120 <HAL_InitTick+0x5c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000020 	.word	0x20000020
 800111c:	20000028 	.word	0x20000028
 8001120:	20000024 	.word	0x20000024

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000028 	.word	0x20000028
 8001148:	200000d8 	.word	0x200000d8

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	200000d8 	.word	0x200000d8

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_Delay+0x40>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffde 	bl	800114c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad2      	subs	r2, r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3f7      	bcc.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000028 	.word	0x20000028

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	4909      	ldr	r1, [pc, #36]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	095b      	lsrs	r3, r3, #5
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	f002 021f 	and.w	r2, r2, #31
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	490d      	ldr	r1, [pc, #52]	; (8001294 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	4909      	ldr	r1, [pc, #36]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	2201      	movs	r2, #1
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	401a      	ands	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e2:	2101      	movs	r1, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	1e59      	subs	r1, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff90 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff2b 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff40 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff90 	bl	800129c <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff33 	bl	800120c <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffa2 	bl	8001300 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e165      	b.n	80016b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8154 	bne.w	80016aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d00b      	beq.n	8001422 <HAL_GPIO_Init+0x5a>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d007      	beq.n	8001422 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001416:	2b11      	cmp	r3, #17
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b12      	cmp	r3, #18
 8001420:	d130      	bne.n	8001484 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001458:	2201      	movs	r2, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 0201 	and.w	r2, r3, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0xfc>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b12      	cmp	r3, #18
 80014c2:	d123      	bne.n	800150c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0203 	and.w	r2, r3, #3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80ae 	beq.w	80016aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4a5c      	ldr	r2, [pc, #368]	; (80016c4 <HAL_GPIO_Init+0x2fc>)
 8001554:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <HAL_GPIO_Init+0x2fc>)
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_GPIO_Init+0x2fc>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156a:	4a57      	ldr	r2, [pc, #348]	; (80016c8 <HAL_GPIO_Init+0x300>)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4e      	ldr	r2, [pc, #312]	; (80016cc <HAL_GPIO_Init+0x304>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x21a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4d      	ldr	r2, [pc, #308]	; (80016d0 <HAL_GPIO_Init+0x308>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x216>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4c      	ldr	r2, [pc, #304]	; (80016d4 <HAL_GPIO_Init+0x30c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x212>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <HAL_GPIO_Init+0x310>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x20e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_GPIO_Init+0x314>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x20a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_GPIO_Init+0x318>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x206>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x31c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x202>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00c      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e00a      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015e2:	2300      	movs	r3, #0
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f4:	4934      	ldr	r1, [pc, #208]	; (80016c8 <HAL_GPIO_Init+0x300>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001602:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_GPIO_Init+0x320>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001626:	4a30      	ldr	r2, [pc, #192]	; (80016e8 <HAL_GPIO_Init+0x320>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800162c:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <HAL_GPIO_Init+0x320>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001650:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <HAL_GPIO_Init+0x320>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_GPIO_Init+0x320>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_GPIO_Init+0x320>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_GPIO_Init+0x320>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <HAL_GPIO_Init+0x320>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	f67f ae96 	bls.w	80013e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b8:	bf00      	nop
 80016ba:	3724      	adds	r7, #36	; 0x24
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40013800 	.word	0x40013800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40021400 	.word	0x40021400
 80016e4:	40021800 	.word	0x40021800
 80016e8:	40013c00 	.word	0x40013c00

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001708:	e003      	b.n	8001712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	619a      	str	r2, [r3, #24]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0cc      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 020f 	and.w	r2, r3, #15
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20c      	bcs.n	800175c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 020f 	and.w	r2, r3, #15
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4a59      	ldr	r2, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4a53      	ldr	r2, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4950      	ldr	r1, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d044      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e067      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4937      	ldr	r1, [pc, #220]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 0203 	bic.w	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff fc9c 	bl	800114c <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff fc98 	bl	800114c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e04f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 020f 	and.w	r2, r3, #15
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d90c      	bls.n	8001868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 020f 	and.w	r2, r3, #15
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4919      	ldr	r1, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	4912      	ldr	r1, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4601      	mov	r1, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	5cd3      	ldrb	r3, [r2, r3]
 80018ba:	fa21 f303 	lsr.w	r3, r1, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fbfc 	bl	80010c4 <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	40023800 	.word	0x40023800
 80018e0:	0800307c 	.word	0x0800307c
 80018e4:	20000020 	.word	0x20000020
 80018e8:	20000024 	.word	0x20000024

080018ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f0:	b0a1      	sub	sp, #132	; 0x84
 80018f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b0c      	cmp	r3, #12
 8001912:	f200 8193 	bhi.w	8001c3c <HAL_RCC_GetSysClockFreq+0x350>
 8001916:	a201      	add	r2, pc, #4	; (adr r2, 800191c <HAL_RCC_GetSysClockFreq+0x30>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	08001951 	.word	0x08001951
 8001920:	08001c3d 	.word	0x08001c3d
 8001924:	08001c3d 	.word	0x08001c3d
 8001928:	08001c3d 	.word	0x08001c3d
 800192c:	08001957 	.word	0x08001957
 8001930:	08001c3d 	.word	0x08001c3d
 8001934:	08001c3d 	.word	0x08001c3d
 8001938:	08001c3d 	.word	0x08001c3d
 800193c:	0800195d 	.word	0x0800195d
 8001940:	08001c3d 	.word	0x08001c3d
 8001944:	08001c3d 	.word	0x08001c3d
 8001948:	08001c3d 	.word	0x08001c3d
 800194c:	08001ad9 	.word	0x08001ad9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b8f      	ldr	r3, [pc, #572]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001952:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001954:	e175      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001956:	4b8f      	ldr	r3, [pc, #572]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8001958:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800195a:	e172      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195c:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001964:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001966:	4b89      	ldr	r3, [pc, #548]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d056      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b86      	ldr	r3, [pc, #536]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	f04f 0400 	mov.w	r4, #0
 800197c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	ea01 0103 	and.w	r1, r1, r3
 8001988:	ea02 0204 	and.w	r2, r2, r4
 800198c:	460b      	mov	r3, r1
 800198e:	4614      	mov	r4, r2
 8001990:	0160      	lsls	r0, r4, #5
 8001992:	6678      	str	r0, [r7, #100]	; 0x64
 8001994:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001996:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800199a:	6678      	str	r0, [r7, #100]	; 0x64
 800199c:	015b      	lsls	r3, r3, #5
 800199e:	663b      	str	r3, [r7, #96]	; 0x60
 80019a0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80019a4:	1a5b      	subs	r3, r3, r1
 80019a6:	eb64 0402 	sbc.w	r4, r4, r2
 80019aa:	01a0      	lsls	r0, r4, #6
 80019ac:	65f8      	str	r0, [r7, #92]	; 0x5c
 80019ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80019b0:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 80019b4:	65f8      	str	r0, [r7, #92]	; 0x5c
 80019b6:	0198      	lsls	r0, r3, #6
 80019b8:	65b8      	str	r0, [r7, #88]	; 0x58
 80019ba:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80019be:	1aed      	subs	r5, r5, r3
 80019c0:	eb66 0604 	sbc.w	r6, r6, r4
 80019c4:	4633      	mov	r3, r6
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	657b      	str	r3, [r7, #84]	; 0x54
 80019ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019cc:	4628      	mov	r0, r5
 80019ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80019d2:	657b      	str	r3, [r7, #84]	; 0x54
 80019d4:	462b      	mov	r3, r5
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	653b      	str	r3, [r7, #80]	; 0x50
 80019da:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80019de:	461d      	mov	r5, r3
 80019e0:	4626      	mov	r6, r4
 80019e2:	186b      	adds	r3, r5, r1
 80019e4:	eb46 0402 	adc.w	r4, r6, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	4621      	mov	r1, r4
 80019ec:	460b      	mov	r3, r1
 80019ee:	025b      	lsls	r3, r3, #9
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f4:	4602      	mov	r2, r0
 80019f6:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 80019fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019fc:	4603      	mov	r3, r0
 80019fe:	025b      	lsls	r3, r3, #9
 8001a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a02:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001a06:	4618      	mov	r0, r3
 8001a08:	4621      	mov	r1, r4
 8001a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a0c:	f04f 0400 	mov.w	r4, #0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	f7fe fbf6 	bl	8000204 <__aeabi_uldivmod>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a1e:	e04d      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a20:	4b5a      	ldr	r3, [pc, #360]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	f04f 0400 	mov.w	r4, #0
 8001a2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	ea01 0103 	and.w	r1, r1, r3
 8001a36:	ea02 0204 	and.w	r2, r2, r4
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4614      	mov	r4, r2
 8001a3e:	0160      	lsls	r0, r4, #5
 8001a40:	6478      	str	r0, [r7, #68]	; 0x44
 8001a42:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a44:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001a48:	6478      	str	r0, [r7, #68]	; 0x44
 8001a4a:	015b      	lsls	r3, r3, #5
 8001a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8001a4e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001a52:	1a5b      	subs	r3, r3, r1
 8001a54:	eb64 0402 	sbc.w	r4, r4, r2
 8001a58:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001a5c:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001a60:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001a64:	ebba 0a03 	subs.w	sl, sl, r3
 8001a68:	eb6b 0b04 	sbc.w	fp, fp, r4
 8001a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a7a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a80:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001a84:	eb1a 0a01 	adds.w	sl, sl, r1
 8001a88:	eb4b 0b02 	adc.w	fp, fp, r2
 8001a8c:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
 8001a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a94:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9a:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001aa4:	4650      	mov	r0, sl
 8001aa6:	4659      	mov	r1, fp
 8001aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aaa:	f04f 0400 	mov.w	r4, #0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	f7fe fba7 	bl	8000204 <__aeabi_uldivmod>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460c      	mov	r4, r1
 8001aba:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001abc:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8001acc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001ad6:	e0b4      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae0:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d054      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	f04f 0400 	mov.w	r4, #0
 8001af8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	ea01 0103 	and.w	r1, r1, r3
 8001b04:	ea02 0204 	and.w	r2, r2, r4
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4614      	mov	r4, r2
 8001b0c:	0160      	lsls	r0, r4, #5
 8001b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b12:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001b16:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001b18:	015b      	lsls	r3, r3, #5
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001b20:	1a5b      	subs	r3, r3, r1
 8001b22:	eb64 0402 	sbc.w	r4, r4, r2
 8001b26:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001b2a:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001b2e:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001b32:	ebb8 0803 	subs.w	r8, r8, r3
 8001b36:	eb69 0904 	sbc.w	r9, r9, r4
 8001b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
 8001b48:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001b4c:	623b      	str	r3, [r7, #32]
 8001b4e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b52:	eb18 0801 	adds.w	r8, r8, r1
 8001b56:	eb49 0902 	adc.w	r9, r9, r2
 8001b5a:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b72:	4640      	mov	r0, r8
 8001b74:	4649      	mov	r1, r9
 8001b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b78:	f04f 0400 	mov.w	r4, #0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4623      	mov	r3, r4
 8001b80:	f7fe fb40 	bl	8000204 <__aeabi_uldivmod>
 8001b84:	4603      	mov	r3, r0
 8001b86:	460c      	mov	r4, r1
 8001b88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b8a:	e04b      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x338>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x364>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	099b      	lsrs	r3, r3, #6
 8001b9e:	f04f 0400 	mov.w	r4, #0
 8001ba2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	ea01 0103 	and.w	r1, r1, r3
 8001bae:	ea02 0204 	and.w	r2, r2, r4
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	0160      	lsls	r0, r4, #5
 8001bb8:	6178      	str	r0, [r7, #20]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001bc0:	6178      	str	r0, [r7, #20]
 8001bc2:	015b      	lsls	r3, r3, #5
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001bca:	1a5b      	subs	r3, r3, r1
 8001bcc:	eb64 0402 	sbc.w	r4, r4, r2
 8001bd0:	01a6      	lsls	r6, r4, #6
 8001bd2:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001bd6:	019d      	lsls	r5, r3, #6
 8001bd8:	1aed      	subs	r5, r5, r3
 8001bda:	eb66 0604 	sbc.w	r6, r6, r4
 8001bde:	00f3      	lsls	r3, r6, #3
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	00eb      	lsls	r3, r5, #3
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001bf2:	186d      	adds	r5, r5, r1
 8001bf4:	eb46 0602 	adc.w	r6, r6, r2
 8001bf8:	02b3      	lsls	r3, r6, #10
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	02ab      	lsls	r3, r5, #10
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	4631      	mov	r1, r6
 8001c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c12:	f04f 0400 	mov.w	r4, #0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4623      	mov	r3, r4
 8001c1a:	f7fe faf3 	bl	8000204 <__aeabi_uldivmod>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460c      	mov	r4, r1
 8001c22:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x364>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	0f1b      	lsrs	r3, r3, #28
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001c30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001c3a:	e002      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x368>)
 8001c3e:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3784      	adds	r7, #132	; 0x84
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	00f42400 	.word	0x00f42400

08001c58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8083 	beq.w	8001d78 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c72:	4b95      	ldr	r3, [pc, #596]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d019      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c7e:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c8a:	4b8f      	ldr	r3, [pc, #572]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c96:	d00c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c98:	4b8b      	ldr	r3, [pc, #556]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d112      	bne.n	8001cca <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca4:	4b88      	ldr	r3, [pc, #544]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cb0:	d10b      	bne.n	8001cca <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb2:	4b85      	ldr	r3, [pc, #532]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d05b      	beq.n	8001d76 <HAL_RCC_OscConfig+0x11e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d157      	bne.n	8001d76 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e216      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x8a>
 8001cd4:	4a7c      	ldr	r2, [pc, #496]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	4b7c      	ldr	r3, [pc, #496]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e01d      	b.n	8001d1e <HAL_RCC_OscConfig+0xc6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCC_OscConfig+0xae>
 8001cec:	4a76      	ldr	r2, [pc, #472]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4a73      	ldr	r2, [pc, #460]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	4b73      	ldr	r3, [pc, #460]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	e00b      	b.n	8001d1e <HAL_RCC_OscConfig+0xc6>
 8001d06:	4a70      	ldr	r2, [pc, #448]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001d08:	4b6f      	ldr	r3, [pc, #444]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4a6d      	ldr	r2, [pc, #436]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001d14:	4b6c      	ldr	r3, [pc, #432]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d013      	beq.n	8001d4e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff fa11 	bl	800114c <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d2e:	f7ff fa0d 	bl	800114c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b64      	cmp	r3, #100	; 0x64
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e1db      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d40:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0xd6>
 8001d4c:	e014      	b.n	8001d78 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4e:	f7ff f9fd 	bl	800114c <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d56:	f7ff f9f9 	bl	800114c <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e1c7      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d68:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f0      	bne.n	8001d56 <HAL_RCC_OscConfig+0xfe>
 8001d74:	e000      	b.n	8001d78 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d06f      	beq.n	8001e64 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d84:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d017      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d90:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d105      	bne.n	8001da8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d9c:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da8:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001db0:	2b0c      	cmp	r3, #12
 8001db2:	d11c      	bne.n	8001dee <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db4:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d116      	bne.n	8001dee <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc0:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x180>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e18f      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	493b      	ldr	r1, [pc, #236]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dec:	e03a      	b.n	8001e64 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d020      	beq.n	8001e38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_RCC_OscConfig+0x274>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff f9a6 	bl	800114c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff f9a2 	bl	800114c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e170      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e16:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	4929      	ldr	r1, [pc, #164]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
 8001e36:	e015      	b.n	8001e64 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_RCC_OscConfig+0x274>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f985 	bl	800114c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e46:	f7ff f981 	bl	800114c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e14f      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d037      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d016      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_RCC_OscConfig+0x278>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f965 	bl	800114c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff f961 	bl	800114c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e12f      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x22e>
 8001ea4:	e01c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCC_OscConfig+0x278>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eac:	f7ff f94e 	bl	800114c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb2:	e00f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7ff f94a 	bl	800114c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d908      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e118      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	42470000 	.word	0x42470000
 8001ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed4:	4b8a      	ldr	r3, [pc, #552]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e9      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8097 	beq.w	800201c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef2:	4b83      	ldr	r3, [pc, #524]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4a7f      	ldr	r2, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f04:	4b7e      	ldr	r3, [pc, #504]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b7c      	ldr	r3, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	4b79      	ldr	r3, [pc, #484]	; (8002104 <HAL_RCC_OscConfig+0x4ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d118      	bne.n	8001f5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2a:	4a76      	ldr	r2, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x4ac>)
 8001f2c:	4b75      	ldr	r3, [pc, #468]	; (8002104 <HAL_RCC_OscConfig+0x4ac>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f36:	f7ff f909 	bl	800114c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3e:	f7ff f905 	bl	800114c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0d3      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	4b6c      	ldr	r3, [pc, #432]	; (8002104 <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x31a>
 8001f64:	4a66      	ldr	r2, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f66:	4b66      	ldr	r3, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f70:	e01c      	b.n	8001fac <HAL_RCC_OscConfig+0x354>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b05      	cmp	r3, #5
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x33c>
 8001f7a:	4a61      	ldr	r2, [pc, #388]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f7c:	4b60      	ldr	r3, [pc, #384]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
 8001f86:	4a5e      	ldr	r2, [pc, #376]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f88:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6713      	str	r3, [r2, #112]	; 0x70
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0x354>
 8001f94:	4a5a      	ldr	r2, [pc, #360]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f96:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	4a57      	ldr	r2, [pc, #348]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001fa2:	4b57      	ldr	r3, [pc, #348]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa6:	f023 0304 	bic.w	r3, r3, #4
 8001faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d015      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb4:	f7ff f8ca 	bl	800114c <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbc:	f7ff f8c6 	bl	800114c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e092      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd2:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0ee      	beq.n	8001fbc <HAL_RCC_OscConfig+0x364>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f8b4 	bl	800114c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f8b0 	bl	800114c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e07c      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffe:	4b40      	ldr	r3, [pc, #256]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ee      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d105      	bne.n	800201c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002010:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d068      	beq.n	80020f6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d060      	beq.n	80020f2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d145      	bne.n	80020c4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x4b0>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7ff f885 	bl	800114c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff f881 	bl	800114c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e04f      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002058:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4926      	ldr	r1, [pc, #152]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	3b01      	subs	r3, #1
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	071b      	lsls	r3, r3, #28
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_RCC_OscConfig+0x4b0>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff f856 	bl	800114c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7ff f852 	bl	800114c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e020      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x44c>
 80020c2:	e018      	b.n	80020f6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_RCC_OscConfig+0x4b0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff f83f 	bl	800114c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff f83b 	bl	800114c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e009      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_OscConfig+0x4a8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x47a>
 80020f0:	e001      	b.n	80020f6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	40007000 	.word	0x40007000
 8002108:	42470060 	.word	0x42470060

0800210c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e01d      	b.n	800215a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe ff14 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3304      	adds	r3, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4610      	mov	r0, r2
 800214c:	f000 fc1a 	bl	8002984 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	68d2      	ldr	r2, [r2, #12]
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b06      	cmp	r3, #6
 800218a:	d007      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	68d2      	ldr	r2, [r2, #12]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a1a      	ldr	r2, [r3, #32]
 80021c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10f      	bne.n	80021f2 <HAL_TIM_Base_Stop_IT+0x48>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	f240 4344 	movw	r3, #1092	; 0x444
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d107      	bne.n	80021f2 <HAL_TIM_Base_Stop_IT+0x48>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e01d      	b.n	800224e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe feda 	bl	8000fe0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f000 fba0 	bl	8002984 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d841      	bhi.n	80022ec <HAL_TIM_IC_Start_IT+0x94>
 8002268:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <HAL_TIM_IC_Start_IT+0x18>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	080022a5 	.word	0x080022a5
 8002274:	080022ed 	.word	0x080022ed
 8002278:	080022ed 	.word	0x080022ed
 800227c:	080022ed 	.word	0x080022ed
 8002280:	080022b7 	.word	0x080022b7
 8002284:	080022ed 	.word	0x080022ed
 8002288:	080022ed 	.word	0x080022ed
 800228c:	080022ed 	.word	0x080022ed
 8002290:	080022c9 	.word	0x080022c9
 8002294:	080022ed 	.word	0x080022ed
 8002298:	080022ed 	.word	0x080022ed
 800229c:	080022ed 	.word	0x080022ed
 80022a0:	080022db 	.word	0x080022db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	68d2      	ldr	r2, [r2, #12]
 80022ae:	f042 0202 	orr.w	r2, r2, #2
 80022b2:	60da      	str	r2, [r3, #12]
      break;
 80022b4:	e01b      	b.n	80022ee <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	68d2      	ldr	r2, [r2, #12]
 80022c0:	f042 0204 	orr.w	r2, r2, #4
 80022c4:	60da      	str	r2, [r3, #12]
      break;
 80022c6:	e012      	b.n	80022ee <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	68d2      	ldr	r2, [r2, #12]
 80022d2:	f042 0208 	orr.w	r2, r2, #8
 80022d6:	60da      	str	r2, [r3, #12]
      break;
 80022d8:	e009      	b.n	80022ee <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	68d2      	ldr	r2, [r2, #12]
 80022e4:	f042 0210 	orr.w	r2, r2, #16
 80022e8:	60da      	str	r2, [r3, #12]
      break;
 80022ea:	e000      	b.n	80022ee <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80022ec:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fda8 	bl	8002e4c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b06      	cmp	r3, #6
 800230c:	d007      	beq.n	800231e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b0c      	cmp	r3, #12
 8002336:	d841      	bhi.n	80023bc <HAL_TIM_IC_Stop_IT+0x94>
 8002338:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <HAL_TIM_IC_Stop_IT+0x18>)
 800233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233e:	bf00      	nop
 8002340:	08002375 	.word	0x08002375
 8002344:	080023bd 	.word	0x080023bd
 8002348:	080023bd 	.word	0x080023bd
 800234c:	080023bd 	.word	0x080023bd
 8002350:	08002387 	.word	0x08002387
 8002354:	080023bd 	.word	0x080023bd
 8002358:	080023bd 	.word	0x080023bd
 800235c:	080023bd 	.word	0x080023bd
 8002360:	08002399 	.word	0x08002399
 8002364:	080023bd 	.word	0x080023bd
 8002368:	080023bd 	.word	0x080023bd
 800236c:	080023bd 	.word	0x080023bd
 8002370:	080023ab 	.word	0x080023ab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	68d2      	ldr	r2, [r2, #12]
 800237e:	f022 0202 	bic.w	r2, r2, #2
 8002382:	60da      	str	r2, [r3, #12]
      break;
 8002384:	e01b      	b.n	80023be <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	68d2      	ldr	r2, [r2, #12]
 8002390:	f022 0204 	bic.w	r2, r2, #4
 8002394:	60da      	str	r2, [r3, #12]
      break;
 8002396:	e012      	b.n	80023be <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	68d2      	ldr	r2, [r2, #12]
 80023a2:	f022 0208 	bic.w	r2, r2, #8
 80023a6:	60da      	str	r2, [r3, #12]
      break;
 80023a8:	e009      	b.n	80023be <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	68d2      	ldr	r2, [r2, #12]
 80023b4:	f022 0210 	bic.w	r2, r2, #16
 80023b8:	60da      	str	r2, [r3, #12]
      break;
 80023ba:	e000      	b.n	80023be <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 80023bc:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2200      	movs	r2, #0
 80023c4:	6839      	ldr	r1, [r7, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fd40 	bl	8002e4c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a1a      	ldr	r2, [r3, #32]
 80023d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10f      	bne.n	80023fc <HAL_TIM_IC_Stop_IT+0xd4>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	f240 4344 	movw	r3, #1092	; 0x444
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IC_Stop_IT+0xd4>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop

08002408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b02      	cmp	r3, #2
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0202 	mvn.w	r2, #2
 8002434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe fbea 	bl	8000c24 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa78 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa7f 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0204 	mvn.w	r2, #4
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fbc0 	bl	8000c24 <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa4e 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa55 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0208 	mvn.w	r2, #8
 80024dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2204      	movs	r2, #4
 80024e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fb96 	bl	8000c24 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa24 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fa2b 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b10      	cmp	r3, #16
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b10      	cmp	r3, #16
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0210 	mvn.w	r2, #16
 8002530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2208      	movs	r2, #8
 8002536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fb6c 	bl	8000c24 <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f9fa 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fa01 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10e      	bne.n	800258c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d107      	bne.n	800258c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0201 	mvn.w	r2, #1
 8002584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fa1a 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	2b80      	cmp	r3, #128	; 0x80
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	2b80      	cmp	r3, #128	; 0x80
 80025a6:	d107      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fcf6 	bl	8002fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d107      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f9c6 	bl	8002970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d10e      	bne.n	8002610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d107      	bne.n	8002610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0220 	mvn.w	r2, #32
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fcc0 	bl	8002f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_TIM_IC_ConfigChannel+0x1a>
 800262e:	2302      	movs	r3, #2
 8002630:	e08a      	b.n	8002748 <HAL_TIM_IC_ConfigChannel+0x130>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d11b      	bne.n	8002680 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f000 fa34 	bl	8002ac4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	6992      	ldr	r2, [r2, #24]
 8002666:	f022 020c 	bic.w	r2, r2, #12
 800266a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	6991      	ldr	r1, [r2, #24]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	6892      	ldr	r2, [r2, #8]
 800267a:	430a      	orrs	r2, r1
 800267c:	619a      	str	r2, [r3, #24]
 800267e:	e05a      	b.n	8002736 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d11c      	bne.n	80026c0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f000 fab8 	bl	8002c0a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	6992      	ldr	r2, [r2, #24]
 80026a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	6991      	ldr	r1, [r2, #24]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	6892      	ldr	r2, [r2, #8]
 80026b8:	0212      	lsls	r2, r2, #8
 80026ba:	430a      	orrs	r2, r1
 80026bc:	619a      	str	r2, [r3, #24]
 80026be:	e03a      	b.n	8002736 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d11b      	bne.n	80026fe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6819      	ldr	r1, [r3, #0]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f000 fb05 	bl	8002ce4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	69d2      	ldr	r2, [r2, #28]
 80026e4:	f022 020c 	bic.w	r2, r2, #12
 80026e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	69d1      	ldr	r1, [r2, #28]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	61da      	str	r2, [r3, #28]
 80026fc:	e01b      	b.n	8002736 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6819      	ldr	r1, [r3, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f000 fb25 	bl	8002d5c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	69d2      	ldr	r2, [r2, #28]
 800271c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002720:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	69d1      	ldr	r1, [r2, #28]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	6892      	ldr	r2, [r2, #8]
 8002730:	0212      	lsls	r2, r2, #8
 8002732:	430a      	orrs	r2, r1
 8002734:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_TIM_ConfigClockSource+0x18>
 8002764:	2302      	movs	r3, #2
 8002766:	e0a6      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x166>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002786:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800278e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d067      	beq.n	8002870 <HAL_TIM_ConfigClockSource+0x120>
 80027a0:	2b40      	cmp	r3, #64	; 0x40
 80027a2:	d80b      	bhi.n	80027bc <HAL_TIM_ConfigClockSource+0x6c>
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d073      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0x140>
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d802      	bhi.n	80027b2 <HAL_TIM_ConfigClockSource+0x62>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d06f      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80027b0:	e078      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d06c      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0x140>
 80027b6:	2b30      	cmp	r3, #48	; 0x30
 80027b8:	d06a      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80027ba:	e073      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027bc:	2b70      	cmp	r3, #112	; 0x70
 80027be:	d00d      	beq.n	80027dc <HAL_TIM_ConfigClockSource+0x8c>
 80027c0:	2b70      	cmp	r3, #112	; 0x70
 80027c2:	d804      	bhi.n	80027ce <HAL_TIM_ConfigClockSource+0x7e>
 80027c4:	2b50      	cmp	r3, #80	; 0x50
 80027c6:	d033      	beq.n	8002830 <HAL_TIM_ConfigClockSource+0xe0>
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d041      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80027cc:	e06a      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d2:	d066      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x152>
 80027d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d8:	d017      	beq.n	800280a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80027da:	e063      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f000 fb0e 	bl	8002e0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]
      break;
 8002808:	e04c      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6899      	ldr	r1, [r3, #8]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f000 faf7 	bl	8002e0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800282c:	609a      	str	r2, [r3, #8]
      break;
 800282e:	e039      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	461a      	mov	r2, r3
 800283e:	f000 f9b5 	bl	8002bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2150      	movs	r1, #80	; 0x50
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fac4 	bl	8002dd6 <TIM_ITRx_SetConfig>
      break;
 800284e:	e029      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	461a      	mov	r2, r3
 800285e:	f000 fa11 	bl	8002c84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2160      	movs	r1, #96	; 0x60
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fab4 	bl	8002dd6 <TIM_ITRx_SetConfig>
      break;
 800286e:	e019      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	461a      	mov	r2, r3
 800287e:	f000 f995 	bl	8002bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2140      	movs	r1, #64	; 0x40
 8002888:	4618      	mov	r0, r3
 800288a:	f000 faa4 	bl	8002dd6 <TIM_ITRx_SetConfig>
      break;
 800288e:	e009      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f000 fa9b 	bl	8002dd6 <TIM_ITRx_SetConfig>
      break;
 80028a0:	e000      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80028a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	d831      	bhi.n	8002938 <HAL_TIM_ReadCapturedValue+0x78>
 80028d4:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80028d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028da:	bf00      	nop
 80028dc:	08002911 	.word	0x08002911
 80028e0:	08002939 	.word	0x08002939
 80028e4:	08002939 	.word	0x08002939
 80028e8:	08002939 	.word	0x08002939
 80028ec:	0800291b 	.word	0x0800291b
 80028f0:	08002939 	.word	0x08002939
 80028f4:	08002939 	.word	0x08002939
 80028f8:	08002939 	.word	0x08002939
 80028fc:	08002925 	.word	0x08002925
 8002900:	08002939 	.word	0x08002939
 8002904:	08002939 	.word	0x08002939
 8002908:	08002939 	.word	0x08002939
 800290c:	0800292f 	.word	0x0800292f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	60fb      	str	r3, [r7, #12]

      break;
 8002918:	e00f      	b.n	800293a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	60fb      	str	r3, [r7, #12]

      break;
 8002922:	e00a      	b.n	800293a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	60fb      	str	r3, [r7, #12]

      break;
 800292c:	e005      	b.n	800293a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	60fb      	str	r3, [r7, #12]

      break;
 8002936:	e000      	b.n	800293a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002938:	bf00      	nop
  }

  return tmpreg;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <TIM_Base_SetConfig+0x114>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d013      	beq.n	80029c4 <TIM_Base_SetConfig+0x40>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a2:	d00f      	beq.n	80029c4 <TIM_Base_SetConfig+0x40>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3d      	ldr	r2, [pc, #244]	; (8002a9c <TIM_Base_SetConfig+0x118>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_Base_SetConfig+0x40>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3c      	ldr	r2, [pc, #240]	; (8002aa0 <TIM_Base_SetConfig+0x11c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0x40>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3b      	ldr	r2, [pc, #236]	; (8002aa4 <TIM_Base_SetConfig+0x120>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0x40>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3a      	ldr	r2, [pc, #232]	; (8002aa8 <TIM_Base_SetConfig+0x124>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a2f      	ldr	r2, [pc, #188]	; (8002a98 <TIM_Base_SetConfig+0x114>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02b      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d027      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <TIM_Base_SetConfig+0x118>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d023      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a2b      	ldr	r2, [pc, #172]	; (8002aa0 <TIM_Base_SetConfig+0x11c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01f      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <TIM_Base_SetConfig+0x120>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01b      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <TIM_Base_SetConfig+0x124>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d017      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a28      	ldr	r2, [pc, #160]	; (8002aac <TIM_Base_SetConfig+0x128>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <TIM_Base_SetConfig+0x12c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00f      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a26      	ldr	r2, [pc, #152]	; (8002ab4 <TIM_Base_SetConfig+0x130>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00b      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <TIM_Base_SetConfig+0x134>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a24      	ldr	r2, [pc, #144]	; (8002abc <TIM_Base_SetConfig+0x138>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d003      	beq.n	8002a36 <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <TIM_Base_SetConfig+0x13c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <TIM_Base_SetConfig+0x114>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d003      	beq.n	8002a7c <TIM_Base_SetConfig+0xf8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0c      	ldr	r2, [pc, #48]	; (8002aa8 <TIM_Base_SetConfig+0x124>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d103      	bne.n	8002a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	615a      	str	r2, [r3, #20]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800
 8002aa4:	40000c00 	.word	0x40000c00
 8002aa8:	40010400 	.word	0x40010400
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	40014400 	.word	0x40014400
 8002ab4:	40014800 	.word	0x40014800
 8002ab8:	40001800 	.word	0x40001800
 8002abc:	40001c00 	.word	0x40001c00
 8002ac0:	40002000 	.word	0x40002000

08002ac4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f023 0201 	bic.w	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a28      	ldr	r2, [pc, #160]	; (8002b90 <TIM_TI1_SetConfig+0xcc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01b      	beq.n	8002b2a <TIM_TI1_SetConfig+0x66>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af8:	d017      	beq.n	8002b2a <TIM_TI1_SetConfig+0x66>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <TIM_TI1_SetConfig+0xd0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <TIM_TI1_SetConfig+0x66>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <TIM_TI1_SetConfig+0xd4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00f      	beq.n	8002b2a <TIM_TI1_SetConfig+0x66>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <TIM_TI1_SetConfig+0xd8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00b      	beq.n	8002b2a <TIM_TI1_SetConfig+0x66>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <TIM_TI1_SetConfig+0xdc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <TIM_TI1_SetConfig+0x66>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a21      	ldr	r2, [pc, #132]	; (8002ba4 <TIM_TI1_SetConfig+0xe0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_TI1_SetConfig+0x66>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <TIM_TI1_SetConfig+0xe4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d101      	bne.n	8002b2e <TIM_TI1_SetConfig+0x6a>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <TIM_TI1_SetConfig+0x6c>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f023 0303 	bic.w	r3, r3, #3
 8002b3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e003      	b.n	8002b4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f023 030a 	bic.w	r3, r3, #10
 8002b68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 030a 	and.w	r3, r3, #10
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	621a      	str	r2, [r3, #32]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	40010400 	.word	0x40010400
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40001800 	.word	0x40001800

08002bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 0201 	bic.w	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 030a 	bic.w	r3, r3, #10
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b087      	sub	sp, #28
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f023 0210 	bic.w	r2, r3, #16
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	031b      	lsls	r3, r3, #12
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	621a      	str	r2, [r3, #32]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f023 0210 	bic.w	r2, r3, #16
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	031b      	lsls	r3, r3, #12
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	621a      	str	r2, [r3, #32]
}
 8002cd8:	bf00      	nop
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f023 0303 	bic.w	r3, r3, #3
 8002d10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002d34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	621a      	str	r2, [r3, #32]
}
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	031b      	lsls	r3, r3, #12
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002dae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	031b      	lsls	r3, r3, #12
 8002db4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f043 0307 	orr.w	r3, r3, #7
 8002df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	609a      	str	r2, [r3, #8]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	021a      	lsls	r2, r3, #8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2201      	movs	r2, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1a      	ldr	r2, [r3, #32]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1a      	ldr	r2, [r3, #32]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e05a      	b.n	8002f66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d022      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d01d      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d018      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d009      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10c      	bne.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40000c00 	.word	0x40000c00
 8002f84:	40010400 	.word	0x40010400
 8002f88:	40014000 	.word	0x40014000
 8002f8c:	40001800 	.word	0x40001800

08002f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ff0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fbe:	e003      	b.n	8002fc8 <LoopCopyDataInit>

08002fc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fc6:	3104      	adds	r1, #4

08002fc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fc8:	480b      	ldr	r0, [pc, #44]	; (8002ff8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fd0:	d3f6      	bcc.n	8002fc0 <CopyDataInit>
  ldr  r2, =_sbss
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fd4:	e002      	b.n	8002fdc <LoopFillZerobss>

08002fd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fd8:	f842 3b04 	str.w	r3, [r2], #4

08002fdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fe0:	d3f9      	bcc.n	8002fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fe2:	f7fd fee3 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fe6:	f000 f811 	bl	800300c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fea:	f7fd fb1f 	bl	800062c <main>
  bx  lr    
 8002fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ff0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ff4:	0800309c 	.word	0x0800309c
  ldr  r0, =_sdata
 8002ff8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ffc:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8003000:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8003004:	200000dc 	.word	0x200000dc

08003008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <ADC_IRQHandler>
	...

0800300c <__libc_init_array>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	4e0d      	ldr	r6, [pc, #52]	; (8003044 <__libc_init_array+0x38>)
 8003010:	4c0d      	ldr	r4, [pc, #52]	; (8003048 <__libc_init_array+0x3c>)
 8003012:	1ba4      	subs	r4, r4, r6
 8003014:	10a4      	asrs	r4, r4, #2
 8003016:	2500      	movs	r5, #0
 8003018:	42a5      	cmp	r5, r4
 800301a:	d109      	bne.n	8003030 <__libc_init_array+0x24>
 800301c:	4e0b      	ldr	r6, [pc, #44]	; (800304c <__libc_init_array+0x40>)
 800301e:	4c0c      	ldr	r4, [pc, #48]	; (8003050 <__libc_init_array+0x44>)
 8003020:	f000 f820 	bl	8003064 <_init>
 8003024:	1ba4      	subs	r4, r4, r6
 8003026:	10a4      	asrs	r4, r4, #2
 8003028:	2500      	movs	r5, #0
 800302a:	42a5      	cmp	r5, r4
 800302c:	d105      	bne.n	800303a <__libc_init_array+0x2e>
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003034:	4798      	blx	r3
 8003036:	3501      	adds	r5, #1
 8003038:	e7ee      	b.n	8003018 <__libc_init_array+0xc>
 800303a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800303e:	4798      	blx	r3
 8003040:	3501      	adds	r5, #1
 8003042:	e7f2      	b.n	800302a <__libc_init_array+0x1e>
 8003044:	08003094 	.word	0x08003094
 8003048:	08003094 	.word	0x08003094
 800304c:	08003094 	.word	0x08003094
 8003050:	08003098 	.word	0x08003098

08003054 <memset>:
 8003054:	4402      	add	r2, r0
 8003056:	4603      	mov	r3, r0
 8003058:	4293      	cmp	r3, r2
 800305a:	d100      	bne.n	800305e <memset+0xa>
 800305c:	4770      	bx	lr
 800305e:	f803 1b01 	strb.w	r1, [r3], #1
 8003062:	e7f9      	b.n	8003058 <memset+0x4>

08003064 <_init>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	bf00      	nop
 8003068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306a:	bc08      	pop	{r3}
 800306c:	469e      	mov	lr, r3
 800306e:	4770      	bx	lr

08003070 <_fini>:
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003072:	bf00      	nop
 8003074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003076:	bc08      	pop	{r3}
 8003078:	469e      	mov	lr, r3
 800307a:	4770      	bx	lr
